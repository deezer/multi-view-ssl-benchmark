"""
RESNET-BASED model
CODE ADAPTED FORM: https://github.com/ilaria-manco/muscall/blob/main/muscall/modules/audio_backbones.py
    https://arxiv.org/abs/2208.12208
"""

import math
import operator
from functools import reduce
from typing import List, Tuple, Union

import torch
from torch import nn
from torchinfo import summary


def trunc_normal_(
    tensor: torch.Tensor,
    mean: float = 0.0,
    std: float = 1.0,
    a: float = -2.0,
    b: float = 2.0,
) -> torch.Tensor:
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x: float) -> float:
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print(
            "Mean is more than 2 std from [a, b] in nn.init.trunc_normal_. The distribution of values may be incorrect."
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        w = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [w, u], then translate to
        # [2w-1, 2u-1].
        tensor.uniform_(2 * w - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def do_init_weights(
    w: torch.Tensor, init_type: str, activation: str = "", default_type: str = "xavier"
) -> torch.Tensor:
    if not (activation == "relu" or activation == "leaky_relu") and init_type == "kaiming":
        init_type = default_type
    output = w
    if init_type == "trunc_normal":
        output = trunc_normal_(w, std=0.02)
    if init_type == "xavier":
        output = nn.init.xavier_normal_(w)
    if init_type == "normal":
        output = nn.init.normal_(w)
    if init_type == "kaiming":
        # recommended to use only with 'relu' or 'leaky_relu'
        output = nn.init.kaiming_normal_(w, nonlinearity=activation)
    return output


class MyWrapperModule(nn.Module):
    def __init__(self, name: str = "") -> None:
        self.name = name
        super(MyWrapperModule, self).__init__()

    def get_number_parameters(self) -> int:
        # print the number of parameters
        c = 0
        for x in list(self.parameters()):
            c += reduce(operator.mul, list(x.size()))
        return c

    def _summary(self, input_shape: Union[List[int], Tuple[int, ...]]) -> None:
        print("\n------ Input shape {} ------".format(input_shape))
        summary(self, input_shape, device="cpu")
        return

    def _init_weights(self, m: nn.Module, init_type: str, activation: str = "") -> None:
        if isinstance(m, nn.Conv2d) or isinstance(m, nn.Linear):
            do_init_weights(m.weight, init_type, activation)
            if m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm) or isinstance(m, nn.GroupNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        return
